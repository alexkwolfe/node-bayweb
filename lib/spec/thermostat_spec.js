// Generated by CoffeeScript 1.6.2
(function() {
  var Thermostat, assert, nock;

  assert = require('chai').assert;

  Thermostat = require('../thermostat');

  nock = require('nock');

  describe('Checkstream', function() {
    var activities, activity, fan, fans, hold, holds, index, mode, modes, _fn, _fn1, _fn2, _i, _j, _k, _l, _len, _len1, _len2, _len3, _results,
      _this = this;

    beforeEach(function() {
      this.nock = nock('https://api.bayweb.com:443').defaultReplyHeaders({
        'server': 'Apache/2.2.17 (Ubuntu)',
        'x-powered-by': 'PHP/5.3.5-1ubuntu7.2',
        'keep-alive': 'timeout=15, max=100',
        'connection': 'Keep-Alive',
        'content-type': 'application/json'
      });
      return this.stat = new Thermostat('12345', 'ABCDE');
    });
    it('should fetch', function(done) {
      var res,
        _this = this;

      res = {
        timestamp: 1368285744,
        iat: 74,
        iah: 0,
        act: 1,
        mode: 2,
        sp: 78,
        act_sp: 78,
        hold: 0,
        fan: 1,
        oat: 73,
        oah: 64,
        wind: 11,
        solar: 24,
        door: 0,
        relay_w2: 0,
        relay_y2: 0,
        in1: 74,
        in2: 1,
        in3: -32768
      };
      this.nock.get('/v2/?action=data&id=12345&key=ABCDE').reply(200, "\n" + (JSON.stringify(res)));
      return this.stat.fetch(function(err) {
        var data;

        data = _this.stat.data;
        assert.equal(_this.stat.activity, 'away 1');
        assert.equal(_this.stat.setPoint, 78);
        assert.equal(_this.stat.mode, 'cool');
        assert.equal(_this.stat.fan, 'on');
        assert.isFalse(_this.stat.hold);
        assert.equal(data.insideTemp, 74);
        assert.equal(data.insideHum, 0);
        assert.equal(data.activitySetPoint, 78);
        assert.equal(data.outsideTemp, 73);
        assert.equal(data.outsideHum, 64);
        assert.equal(data.windMph, 11);
        assert.equal(data.solarIndex, 24);
        assert.isFalse(data.doorOpen, false);
        assert.equal(data.relay1, false);
        assert.equal(data.relay2, false);
        assert.equal(data.input1, 74);
        assert.equal(data.input2, true);
        assert.equal(data.input3, null);
        assert.deepEqual(data.updatedAt, new Date(res.timestamp * 1000));
        return done(err);
      });
    });
    activities = ['occupied', 'away 1', 'away 2', 'sleep'];
    _fn = function(i, activity) {
      return it("should set activity to " + activity, function(done) {
        this.nock.get("/v2/?action=set&act=" + i + "&id=12345&key=ABCDE").reply(200, "\n{\"act\":\"" + i + "\"}");
        this.stat.activity = activity;
        return this.stat.save(done);
      });
    };
    for (index = _i = 0, _len = activities.length; _i < _len; index = ++_i) {
      activity = activities[index];
      _fn(index, activity);
    }
    modes = ['off', 'heat', 'cool'];
    _fn1 = function(i, m) {
      return it("should set mode to " + mode, function(done) {
        this.nock.get("/v2/?action=set&mode=" + i + "&id=12345&key=ABCDE").reply(200, "\n{\"act\":\"" + i + "\"}");
        this.stat.mode = m;
        return this.stat.save(done);
      });
    };
    for (index = _j = 0, _len1 = modes.length; _j < _len1; index = ++_j) {
      mode = modes[index];
      _fn1(index, mode);
    }
    holds = [false, true];
    _fn2 = function(i, h) {
      return it("should turn hold " + (h ? 'on' : 'off'), function(done) {
        this.nock.get("/v2/?action=set&hold=" + i + "&id=12345&key=ABCDE").reply(200, "\n{\"act\":\"" + i + "\"}");
        this.stat.hold = h;
        return this.stat.save(done);
      });
    };
    for (index = _k = 0, _len2 = holds.length; _k < _len2; index = ++_k) {
      hold = holds[index];
      _fn2(index, hold);
    }
    fans = ['auto', 'on'];
    _results = [];
    for (index = _l = 0, _len3 = fans.length; _l < _len3; index = ++_l) {
      fan = fans[index];
      _results.push((function(i, f) {
        return it("should set fan to " + f, function(done) {
          this.nock.get("/v2/?action=set&fan=" + i + "&id=12345&key=ABCDE").reply(200, "\n{\"act\":\"" + i + "\"}");
          this.stat.fan = f;
          return this.stat.save(done);
        });
      })(index, fan));
    }
    return _results;
  });

}).call(this);
