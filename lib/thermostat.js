// Generated by CoffeeScript 1.6.2
(function() {
  var Thermostat, request,
    __hasProp = {}.hasOwnProperty;

  request = require('request');

  Thermostat = (function() {
    Thermostat.baseUrl = 'https://api.bayweb.com/v2/';

    /*
    Public: Instantiate a new Thermostat
    
    id: The thermostat identifier (from the API section of the BAYWeb Cloud EMS
    key: The API key for the thermostat (also from the API section of the BAYWeb Cloud EMS)
    cb: Optional callback. If specified, the Thermostat data will be immediately fetched and
        the callback invoked on success or error
    
    Returns nothing
    */


    function Thermostat(id, key, cb) {
      this.id = id;
      this.key = key;
      this.data = {};
      if (cb) {
        this.fetch(cb);
      }
    }

    Thermostat.prototype.fetch = function(cb) {
      var _this = this;

      this.req({
        action: 'data'
      }, function(err, data) {
        if (err && cb) {
          cb(err);
        }
        _this.activity = (function() {
          switch (data.act) {
            case 0:
              return 'occupied';
            case 1:
              return 'away 1';
            case 2:
              return 'away 2';
            case 3:
              return 'sleep';
          }
        })();
        _this.mode = (function() {
          switch (data.mode) {
            case 0:
              return 'off';
            case 1:
              return 'heat';
            case 2:
              return 'cool';
          }
        })();
        _this.setPoint = data.sp;
        _this.hold = !!data.hold;
        _this.fan = (function() {
          switch (data.fan) {
            case 0:
              return 'auto';
            case 1:
              return 'on';
          }
        })();
        _this.data = {
          insideTemp: data.iat,
          insideHum: data.iah,
          activitySetPoint: data.act_sp,
          outsideTemp: data.oat,
          outsideHum: data.oah,
          windMph: data.wind,
          solarIndex: data.solar,
          doorOpen: !!data.door,
          relay1: !!data.relay_w2,
          relay2: !!data.relay_y2,
          input1: data.in1 < 0 ? null : data.in1 <= 1 ? !!data.in1 : data.in1,
          input2: data.in2 < 0 ? null : data.in2 <= 1 ? !!data.in2 : data.in2,
          input3: data.in3 < 0 ? null : data.in3 <= 1 ? !!data.in3 : data.in3,
          updatedAt: new Date(data.timestamp * 1000)
        };
        if (cb) {
          return cb();
        }
      });
      return this;
    };

    /*
    Public: Save thermostat settings.
    
    The following properties are mutable and can be saved:
      * activity - 'occupied', 'away 1', 'away 2', or 'sleep'
      * mode - 'off', 'heat', or 'cool'
      * hold - true or false
      * fan - 'auto' or 'on'
      * setPoint - integer value of the currently desired set point
    
    cb: Optional callback. If specified, the callback will be invoked with two parameters. The first is an
        error if one occurred, otherwise null. The second is the BAYWeb server response.
    
    Returns nothing
    */


    Thermostat.prototype.save = function(cb) {
      var options;

      options = {
        action: 'set',
        act: (function() {
          switch (this.activity) {
            case 'occupied':
              return 0;
            case 'away 1':
              return 1;
            case 'away 2':
              return 2;
            case 'sleep':
              return 3;
          }
        }).call(this),
        mode: (function() {
          switch (this.mode) {
            case 'off':
              return 0;
            case 'heat':
              return 1;
            case 'cool':
              return 2;
          }
        }).call(this),
        hold: (function() {
          switch (this.hold) {
            case false:
              return 0;
            case true:
              return 1;
          }
        }).call(this),
        fan: (function() {
          switch (this.fan) {
            case 'auto':
              return 0;
            case 'on':
              return 1;
          }
        }).call(this)
      };
      if (this.setPoint !== this.data.activitySetPoint) {
        if (this.mode === 'heat') {
          options.heat_sp = this.setPoint;
        } else if (this.mode === 'cool') {
          options.cool_sp = this.setPoint;
        }
      }
      this.req(options, cb);
      return this;
    };

    /*
    Private: Make the HTTP request to the BAYWeb service and parse the JSON response body to an object.
    
    params: The parameters to pass. ID and Key are merged into these params.
    cb: The callback to invoke when the request has completed (or errored).
    
    Returns nothing
    */


    Thermostat.prototype.req = function(params, cb) {
      var key, value;

      params.id = this.id;
      params.key = this.key;
      for (key in params) {
        if (!__hasProp.call(params, key)) continue;
        value = params[key];
        if (value == null) {
          delete params[key];
        }
      }
      return request(Thermostat.baseUrl, {
        method: 'get',
        qs: params,
        strictSSL: false
      }, function(err, res, body) {
        if (cb) {
          if (err) {
            return cb(err);
          }
          return cb(null, JSON.parse(body));
        }
      });
    };

    return Thermostat;

  })();

  module.exports = Thermostat;

}).call(this);
